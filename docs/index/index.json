{"includedArchiveIdentifiers":["FluentExtensions"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/config","title":"var config: ReflectionConfiguration","type":"property"},{"path":"\/documentation\/fluentextensions\/automigration\/fieldkeymap","title":"var fieldKeyMap: [String : FieldKey]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/customize(schema:)","title":"func customize(schema: SchemaBuilder) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/automigration\/override(schema:property:)","title":"func override(schema: SchemaBuilder, property: ReflectedSchemaProperty) -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/automigration\/prepare(on:)","title":"func prepare(on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/automigration\/revert(on:)","title":"func revert(on: any Database) async throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/modeltype","title":"AutoMigration.ModelType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/name","title":"var name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/automigration\/prepare(on:)-55paf","title":"func prepare(on: any Database) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/automigration\/revert(on:)-7jled","title":"func revert(on: any Database) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/fluentextensions\/automigration\/migration-implementations","title":"Migration Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/automigration","title":"AutoMigration","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/init(resource:resources:)","title":"init(resource: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl.ResourceChecks, resources: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl.ResourcesChecks)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resource","title":"var resource: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl.ResourceChecks","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resources","title":"var resources: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl.ResourcesChecks","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resourcecheck","title":"Controller.AccessControl.ResourceCheck","type":"typealias"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resourcechecks","title":"Controller.AccessControl.ResourceChecks","type":"typealias"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resourcescheck","title":"Controller.AccessControl.ResourcesCheck","type":"typealias"},{"path":"\/documentation\/fluentextensions\/controller\/accesscontrol\/resourceschecks","title":"Controller.AccessControl.ResourcesChecks","type":"typealias"}],"path":"\/documentation\/fluentextensions\/controller\/accesscontrol","title":"Controller.AccessControl","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/init(baseroute:middlewares:supportedactions:savemethod:putaction:forcedelete:accesscontrol:)","title":"init(baseRoute: [any PathComponentRepresentable], middlewares: [any Middleware], supportedActions: Controller<Resource, Create, Read, Update, SearchResult>.SupportedActions, saveMethod: SaveMethod, putAction: PUTRouteAction, forceDelete: Bool, accessControl: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/accesscontrol","title":"var accessControl: Controller<Resource, Create, Read, Update, SearchResult>.AccessControl","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/baseroute","title":"var baseRoute: [any PathComponentRepresentable]","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/forcedelete","title":"var forceDelete: Bool","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/middlewares","title":"var middlewares: [any Middleware]","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/putaction","title":"var putAction: PUTRouteAction","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/savemethod","title":"var saveMethod: SaveMethod","type":"property"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.class\/supportedactions","title":"var supportedActions: Controller<Resource, Create, Read, Update, SearchResult>.SupportedActions","type":"property"}],"path":"\/documentation\/fluentextensions\/controller\/config-swift.class","title":"Controller.Config","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/init(_:)","title":"convenience init((Controller<Resource, Create, Read, Update, SearchResult>.Config) -> ())","type":"init"},{"path":"\/documentation\/fluentextensions\/controller\/init(config:)","title":"init(config: Controller<Resource, Create, Read, Update, SearchResult>.Config)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/config-swift.property","title":"var config: Controller<Resource, Create, Read, Update, SearchResult>.Config","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/assertrequest(_:isauthorizedto:_:)-5fchn","title":"func assertRequest(Request, isAuthorizedTo: Controller<Resource, Create, Read, Update, SearchResult>.AuthorizedAction, Resource) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/assertrequest(_:isauthorizedto:_:)-7hi9c","title":"func assertRequest(Request, isAuthorizedTo: Controller<Resource, Create, Read, Update, SearchResult>.AuthorizedAction, [Resource]) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/boot(routes:)","title":"func boot(routes: any RoutesBuilder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/convert(_:)","title":"func convert(Create) throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/create(createmodel:on:)","title":"func create(createModel: Create, on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/create(createmodels:on:)","title":"func create(createModels: [Create], on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/create(on:)","title":"func create(on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/create(resource:on:)","title":"func create(resource: Resource, on: Request) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/create(resources:on:)","title":"func create(resources: [Resource], on: Request) async throws -> [Resource]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/createbatch(on:)","title":"func createBatch(on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/delete(on:)","title":"func delete(on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/delete(resource:on:force:)","title":"func delete(resource: Resource, on: Request, force: Bool) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/delete(resources:on:force:)","title":"func delete(resources: [Resource], on: Request, force: Bool) async throws -> [Resource]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/read(_:)","title":"func read(Resource) throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/read(on:)","title":"func read(on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/readall(on:)","title":"func readAll(on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/readallmodels(on:)","title":"func readAllModels(on: Request) async throws -> [Resource]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/readmodel(parameter:on:)","title":"func readModel(parameter: Resource.ResolvedParameter, on: Request) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/registercrudroutes(routes:)","title":"func registerCRUDRoutes(routes: any RoutesBuilder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/registerroutes(routes:)","title":"func registerRoutes(routes: any RoutesBuilder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:cancreate:)-39ryx","title":"func request(Request, canCreate: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:cancreate:)-4f9nb","title":"func request(Request, canCreate: Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:candelete:)-59ocv","title":"func request(Request, canDelete: Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:candelete:)-6g7pl","title":"func request(Request, canDelete: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:canread:)-5zpig","title":"func request(Request, canRead: Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:canread:)-6wdbu","title":"func request(Request, canRead: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:cansave:)-2lzyz","title":"func request(Request, canSave: Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:cansave:)-43clu","title":"func request(Request, canSave: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:cansearch:)","title":"func request(Request, canSearch: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:canupdate:)-6iy9s","title":"func request(Request, canUpdate: [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:canupdate:)-84oba","title":"func request(Request, canUpdate: Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:isauthorizedto:_:)-8ztme","title":"func request(Request, isAuthorizedTo: Controller<Resource, Create, Read, Update, SearchResult>.AuthorizedAction, Resource) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/request(_:isauthorizedto:_:)-mnbr","title":"func request(Request, isAuthorizedTo: Controller<Resource, Create, Read, Update, SearchResult>.AuthorizedAction, [Resource]) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/save(on:)","title":"func save(on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/save(resource:on:)","title":"func save(resource: Resource, on: Request) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/save(resources:on:)","title":"func save(resources: [Resource], on: Request) async throws -> [Resource]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/save(savemodel:on:)","title":"func save(saveModel: Create, on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/save(savemodels:on:)","title":"func save(saveModels: [Create], on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/savebatch(on:)","title":"func saveBatch(on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/search(on:)","title":"func search(on: Request) async throws -> SearchResult","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(on:)","title":"func update(on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(resource:on:)","title":"func update(resource: Resource, on: Request) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(resource:with:on:)","title":"func update(resource: Resource, with: Update, on: Request) async throws -> Resource","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(resources:on:)","title":"func update(resources: [Resource], on: Request) async throws -> [Resource]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(updatemodel:on:)","title":"func update(updateModel: Update, on: Request) async throws -> Read","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/update(updatemodels:on:)","title":"func update(updateModels: [Update], on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/updatebatch(on:)","title":"func updateBatch(on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/validatecreate(req:for:)","title":"func validateCreate(req: Request, for: Resource) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/validatesave(req:for:)","title":"func validateSave(req: Request, for: Resource) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/validateupdate(req:for:)","title":"func validateUpdate(req: Request, for: Resource) async throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/create","title":"case create","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/createbatch","title":"case createBatch","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/read","title":"case read","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/readall","title":"case readAll","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/savebatch","title":"case saveBatch","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/search","title":"case search","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/update","title":"case update","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/action\/updatebatch","title":"case updateBatch","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/controller\/action\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/controller\/action\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/decode(fromjson:using:)-9uim3","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/decode(fromjson:using:)-dlxy","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/controller\/action\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/controller\/action\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/controller\/action\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/action\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/controller\/action\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/controller\/action","title":"Controller.Action","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/create","title":"case create","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/read","title":"case read","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/update","title":"case update","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/controller\/authorizedaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/controller\/authorizedaction","title":"Controller.AuthorizedAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/controller\/supportedactions\/all","title":"case all","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/supportedactions\/everythingbut(_:)","title":"case everythingBut([Controller<Resource, Create, Read, Update, SearchResult>.Action])","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/supportedactions\/none","title":"case none","type":"case"},{"path":"\/documentation\/fluentextensions\/controller\/supportedactions\/only(_:)","title":"case only([Controller<Resource, Create, Read, Update, SearchResult>.Action])","type":"case"}],"path":"\/documentation\/fluentextensions\/controller\/supportedactions","title":"Controller.SupportedActions","type":"enum"}],"path":"\/documentation\/fluentextensions\/controller","title":"Controller","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/childcrudroute(_:pathslug:queryparamkey:childforeignkeypath:childcontroller:)","title":"func childCRUDRoute<C, CC, CR, CU>(any RoutesBuilder, pathSlug: String, queryParamKey: String, childForeignKeyPath: ChildrenPropertyKeyPath<Model, C>, childController: FluentController<C, CC, CR, CU>)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/convert(_:)","title":"func convert(Model) throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/pivotcrudroutes(_:relationshipname:through:)","title":"func pivotCRUDRoutes<S, P>(any RoutesBuilder, relationshipName: String, through: SiblingPropertyKeyPath<Model, S, P>)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/pivotcrudroutes(_:relationshipname:through:pivotcontroller:)","title":"func pivotCRUDRoutes<S, P, PC, PR, PU>(any RoutesBuilder, relationshipName: String, through: SiblingPropertyKeyPath<Model, S, P>, pivotController: FluentController<P, PC, PR, PU>)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/read(_:)","title":"func read(Model) throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/resolveresourceid(for:on:)","title":"func resolveResourceID(for: Model.ResolvedParameter, on: Request) async throws -> Model.IDValue","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/siblingcrudroutes(_:relationshipname:through:siblingcontroller:)","title":"func siblingCRUDRoutes<P, S, SC, SR, SU>(any RoutesBuilder, relationshipName: String, through: SiblingPropertyKeyPath<Model, S, P>, siblingController: FluentController<S, SC, SR, SU>)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentadmincontroller\/update(resource:with:on:)","title":"func update(resource: Model, with: Model, on: Request) async throws -> Model","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentadmincontroller","title":"FluentAdminController","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/init(config:)","title":"init(config: Controller<Model, Create, Read, Update, Page<Read>>.Config)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/defaultsort","title":"var defaultSort: DatabaseQuery.Sort?","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/parameterfilterconfig","title":"var parameterFilterConfig: QueryParameterFilter.Builder<Model>.Config","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/applyqueryconstraints(query:on:)","title":"func applyQueryConstraints(query: QueryBuilder<Model>, on: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/buildquery(on:join:)","title":"func buildQuery(on: Request, join: Bool?) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/buildsearchquery(on:join:)","title":"func buildSearchQuery(on: Request, join: Bool?) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/configure(query:on:join:)","title":"func configure(query: QueryBuilder<Model>, on: Request, join: Bool?) -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/create(model:in:)","title":"func create(model: Model, in: any Database) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/create(resource:on:)","title":"func create(resource: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/create(resources:on:)","title":"func create(resources: [Model], on: Request) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/delete(model:in:force:)","title":"func delete(model: Model, in: any Database, force: Bool) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/delete(resource:on:force:)","title":"func delete(resource: Model, on: Request, force: Bool) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/delete(resources:on:force:)","title":"func delete(resources: [Model], on: Request, force: Bool) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/executeread(query:on:join:)","title":"func executeRead(query: QueryBuilder<Model>, on: Request, join: Bool?) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/executereadpage(query:on:join:)","title":"func executeReadPage(query: QueryBuilder<Model>, on: Request, join: Bool?) async throws -> Page<Read>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/filter(querybuilder:for:)","title":"func filter(queryBuilder: QueryBuilder<Model>, for: String) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/filtersearch(query:on:)","title":"func filterSearch(query: QueryBuilder<Model>, on: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/isjoinedrequest(_:)","title":"func isJoinedRequest(Request) -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/join(query:)","title":"func join(query: QueryBuilder<Model>) -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/preparemodelforcreating(model:on:)","title":"func prepareModelForCreating(model: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/preparemodelforsaving(model:on:)","title":"func prepareModelForSaving(model: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/preparemodelforupdating(model:on:)","title":"func prepareModelForUpdating(model: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/readallmodels(on:)","title":"func readAllModels(on: Request) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/readmodel(id:on:join:)","title":"func readModel(id: Model.IDValue, on: Request, join: Bool?) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/readmodel(parameter:on:)","title":"func readModel(parameter: Model.ResolvedParameter, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/readpage(of:on:)","title":"func readPage(of: QueryBuilder<Model>, on: Request) async throws -> Page<Read>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/readresults(of:on:)","title":"func readResults(of: QueryBuilder<Model>, on: Request) async throws -> [Read]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/request(_:cansave:)","title":"func request(Request, canSave: Model) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/requireresourceid(on:)","title":"func requireResourceID(on: Request) async throws -> Model.IDValue","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/resolveresourceid(for:on:)","title":"func resolveResourceID(for: Model.ResolvedParameter, on: Request) async throws -> Model.IDValue","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/resolveresourceid(on:)","title":"func resolveResourceID(on: Request) async throws -> Model.IDValue?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/save(model:in:)","title":"func save(model: Model, in: any Database) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/save(resource:on:)","title":"func save(resource: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/save(resources:on:)","title":"func save(resources: [Model], on: Request) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/search(on:)","title":"func search(on: Request) async throws -> Page<Read>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/sortsearch(query:on:)","title":"func sortSearch(query: QueryBuilder<Model>, on: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/update(model:in:)","title":"func update(model: Model, in: any Database) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/update(resource:on:)","title":"func update(resource: Model, on: Request) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/update(resources:on:)","title":"func update(resources: [Model], on: Request) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/upsert(model:in:)","title":"func upsert(model: Model, in: any Database) async throws -> Model","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/validatecreate(req:for:)","title":"func validateCreate(req: Request, for: Model) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/validatesave(req:for:)","title":"func validateSave(req: Request, for: Model) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentcontroller\/validateupdate(req:for:)","title":"func validateUpdate(req: Request, for: Model) async throws","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentcontroller","title":"FluentController","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/addfilter(_:)","title":"func addFilter(LogMiddleware.RequestFilter)","type":"method"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: any AsyncResponder) async throws -> Response","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/requestfilter","title":"LogMiddleware.RequestFilter","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/decodeurlpaths","title":"static var decodeURLPaths: Bool","type":"property"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/detailelements","title":"static var detailElements: Set<NetworkLoggerDetailElement>","type":"property"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/detaillevel","title":"static var detailLevel: NetworkLoggerDetailLevel","type":"property"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/omittedmethods","title":"static var omittedMethods: [HTTPMethod]?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: any Responder) -> any Responder","type":"method"},{"path":"\/documentation\/fluentextensions\/logmiddleware\/respond(to:chainingto:)-4izm8","title":"func respond(to: Request, chainingTo: any Responder) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/fluentextensions\/logmiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/logmiddleware","title":"LogMiddleware","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/identifier","title":"var identifier: String","type":"property"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/query","title":"var query: String","type":"property"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/reason","title":"var reason: String","type":"property"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/status","title":"var status: HTTPResponseStatus","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/headers","title":"var headers: HTTPHeaders","type":"property"}],"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/aborterror-implementations","title":"AbortError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/isnetworkconnectionerror()","title":"func isNetworkConnectionError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/isusernetworkconnectionunavailableerror()","title":"func isUserNetworkConnectionUnavailableError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/keyvaluedescription()","title":"func keyValueDescription() -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/printdescription()","title":"func printDescription()","type":"method"}],"path":"\/documentation\/fluentextensions\/malformedrangequeryerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/malformedrangequeryerror","title":"MalformedRangeQueryError","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fluentextensions\/pivotentity\/init(fromid:toid:)","title":"init(fromId: From.IDValue, toId: To.IDValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/from","title":"var from: From","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/id","title":"var id: UUID?","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/to","title":"var to: To","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createschema(for:fromidfield:toidfield:on:)","title":"static func createSchema(for: String, fromIDField: String, toIDField: String, on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/dropschema(for:on:)","title":"static func dropSchema(for: String, on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schema(for:)","title":"static func schema(for: String) -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/joined(_:)","title":"func joined<Joined>(Joined.Type) throws -> Joined","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/alias","title":"static var alias: String?","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/anymodel-implementations","title":"AnyModel Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decoderequest(_:)-9uicr","title":"static func decodeRequest(Request) async throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/asyncrequestdecodable-implementations","title":"AsyncRequestDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/afterdecode()","title":"func afterDecode() throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/beforeencode()","title":"func beforeEncode() throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/defaultcontenttype","title":"static var defaultContentType: HTTPMediaType","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/validate(on:)","title":"static func validate(on: Request) throws","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/content-implementations","title":"Content Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decode(fromjson:using:)-5zx9c","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decode(fromjson:using:)-6kxsb","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/haschanges","title":"var hasChanges: Bool","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/properties","title":"var properties: [any AnyProperty]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/input(to:)","title":"func input(to: any DatabaseInput)","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/output(from:)","title":"func output(from: any DatabaseOutput) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/boolean","title":"PivotEntity.Boolean","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/enum","title":"PivotEntity.Enum","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/field","title":"PivotEntity.Field","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/group","title":"PivotEntity.Group","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/optionalboolean","title":"PivotEntity.OptionalBoolean","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/optionalenum","title":"PivotEntity.OptionalEnum","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/optionalfield","title":"PivotEntity.OptionalField","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/keys","title":"static var keys: [FieldKey]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/path(for:)","title":"static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/fields-implementations","title":"Fields Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/assertexistingentitywithid(on:)","title":"func assertExistingEntityWithId(on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/create(in:)","title":"func create(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/delete(from:force:)","title":"func delete(from: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/existingentitywithid(on:)","title":"func existingEntityWithId(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/ischild(_:in:)","title":"func isChild<M>(ChildrenProperty<M, Self>, in: any Database) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/replace(with:on:)","title":"func replace(with: Self, on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/replacechildren(with:through:in:)","title":"func replaceChildren<C>(with: [C], through: ChildrenPropertyKeyPath<Self, C>, in: any Database) async throws -> [C]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/restore(in:)","title":"func restore(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/save(in:)","title":"func save(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(in:)","title":"func update(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(in:force:)","title":"func update(in: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateifexists(in:)","title":"func updateIfExists(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/upsert(in:)","title":"func upsert(in: any Database) async throws -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/selfsiblings","title":"PivotEntity.SelfSiblings","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/timestampkeypath","title":"PivotEntity.TimestampKeyPath","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/crudpathname","title":"static var crudPathName: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idfieldkey","title":"static var idFieldKey: FieldKey","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idkeystringpath","title":"static var idKeyStringPath: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idproperty","title":"static var idProperty: IDProperty<Self, Self.IDValue>","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idpropertykeypath","title":"static var idPropertyKeyPath: KeyPath<Self, IDProperty<Self, Self.IDValue>>","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schema","title":"static var schema: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/automigrate(on:)","title":"static func autoMigrate(on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/create(id:in:_:)","title":"static func create(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createbatch(size:in:_:)","title":"static func createBatch(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createbatchsync(size:in:_:)","title":"static func createBatchSync(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createsync(id:in:_:)","title":"static func createSync(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/deleteall(force:in:transaction:)","title":"static func deleteAll(force: Bool, in: any Database, transaction: Bool) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(_:on:)-25tm4","title":"static func find([Self.IDValue], on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(_:value:on:)","title":"static func find<V>(KeyPath<Self, V>, value: V.Value, on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(where:on:)-4ec1i","title":"static func find(where: [ModelValueFilter<Self>], on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(where:on:)-4fzaa","title":"static func find(where: ModelValueFilter<Self>..., on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(_:value:limit:on:)","title":"static func findAll<V>(KeyPath<Self, FieldProperty<Self, V>>, value: V, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:groupedby:limit:on:)-5vth2","title":"static func findAll<G>(where: ModelValueFilter<Self>..., groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:groupedby:limit:on:)-8p32y","title":"static func findAll<G>(where: [ModelValueFilter<Self>], groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:limit:on:)-36f4b","title":"static func findAll(where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:limit:on:)-4ta53","title":"static func findAll(where: ModelValueFilter<Self>..., limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreate(id:in:_:)","title":"static func findOrCreate(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatebatch(ids:in:_:)","title":"static func findOrCreateBatch(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatebatchsync(ids:in:_:)","title":"static func findOrCreateBatchSync(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatesync(id:in:_:)","title":"static func findOrCreateSync(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/groupedvalue(of:where:limit:on:)","title":"static func groupedValue<V>(of: KeyPath<Self, V>, where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [V]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/paginate(for:pagekey:perpagekey:_:)","title":"static func paginate(for: Request, pageKey: String, perPageKey: String, [DatabaseQuery.Sort]) async throws -> Page<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/query(on:)-47lde","title":"static func query(on: Request) -> QueryBuilder<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/random(on:)","title":"static func random(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/random(on:count:)","title":"static func random(on: any Database, count: Int) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/reflectschema(on:configuration:)","title":"static func reflectSchema(on: any Database, configuration: ReflectionConfiguration?) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schema(for:)-4c3f4","title":"static func schema(for: any Database) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/selfsiblingmiddleware(from:to:)","title":"static func selfSiblingMiddleware<M>(from: KeyPath<Self, ParentProperty<Self, M>>, to: KeyPath<Self, ParentProperty<Self, M>>) -> SelfSiblingModelMiddleware<Self, M>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateall(in:transaction:)","title":"static func updateAll(in: any Database, transaction: Bool) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateall(in:transaction:modifications:)","title":"static func updateAll(in: any Database, transaction: Bool, modifications: (Self) -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallasync(in:transaction:modifications:)","title":"static func updateAllAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectively(in:transaction:modifications:)","title":"static func updateAllSelectively(in: any Database, transaction: Bool, modifications: (Self) -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectivelyasync(in:transaction:modifications:)","title":"static func updateAllSelectivelyAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectivelythrowing(in:transaction:continueonerror:modifications:)","title":"static func updateAllSelectivelyThrowing(in: any Database, transaction: Bool, continueOnError: Bool, modifications: (Self) throws -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallthrowing(in:transaction:modifications:)","title":"static func updateAllThrowing(in: any Database, transaction: Bool, modifications: (Self) throws -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updatevalue(at:to:where:in:)","title":"static func updateValue<Property>(at: KeyPath<Self, Property>, to: Property.Value, where: ModelValueFilter<Self>..., in: any Database) async throws -> [Self]","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/model-implementations","title":"Model Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/assertexistingentitywithid(on:)","title":"func assertExistingEntityWithId(on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/create(in:)","title":"func create(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/delete(from:force:)","title":"func delete(from: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/existingentitywithid(on:)","title":"func existingEntityWithId(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/ischild(_:in:)","title":"func isChild<M>(ChildrenProperty<M, Self>, in: any Database) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/replace(with:on:)","title":"func replace(with: Self, on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/replacechildren(with:through:in:)","title":"func replaceChildren<C>(with: [C], through: ChildrenPropertyKeyPath<Self, C>, in: any Database) async throws -> [C]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/restore(in:)","title":"func restore(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/save(in:)","title":"func save(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(in:)","title":"func update(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/update(in:force:)","title":"func update(in: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateifexists(in:)","title":"func updateIfExists(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/upsert(in:)","title":"func upsert(in: any Database) async throws -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/selfsiblings","title":"PivotEntity.SelfSiblings","type":"typealias"},{"path":"\/documentation\/fluentextensions\/pivotentity\/timestampkeypath","title":"PivotEntity.TimestampKeyPath","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/crudpathname","title":"static var crudPathName: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idfieldkey","title":"static var idFieldKey: FieldKey","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idkeystringpath","title":"static var idKeyStringPath: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idproperty","title":"static var idProperty: IDProperty<Self, Self.IDValue>","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/idpropertykeypath","title":"static var idPropertyKeyPath: KeyPath<Self, IDProperty<Self, Self.IDValue>>","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schema","title":"static var schema: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/automigrate(on:)","title":"static func autoMigrate(on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/create(id:in:_:)","title":"static func create(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createbatch(size:in:_:)","title":"static func createBatch(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createbatchsync(size:in:_:)","title":"static func createBatchSync(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/createsync(id:in:_:)","title":"static func createSync(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/deleteall(force:in:transaction:)","title":"static func deleteAll(force: Bool, in: any Database, transaction: Bool) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(_:on:)-25tm4","title":"static func find([Self.IDValue], on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(_:value:on:)","title":"static func find<V>(KeyPath<Self, V>, value: V.Value, on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(where:on:)-4ec1i","title":"static func find(where: [ModelValueFilter<Self>], on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/find(where:on:)-4fzaa","title":"static func find(where: ModelValueFilter<Self>..., on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(_:value:limit:on:)","title":"static func findAll<V>(KeyPath<Self, FieldProperty<Self, V>>, value: V, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:groupedby:limit:on:)-5vth2","title":"static func findAll<G>(where: ModelValueFilter<Self>..., groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:groupedby:limit:on:)-8p32y","title":"static func findAll<G>(where: [ModelValueFilter<Self>], groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:limit:on:)-36f4b","title":"static func findAll(where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findall(where:limit:on:)-4ta53","title":"static func findAll(where: ModelValueFilter<Self>..., limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreate(id:in:_:)","title":"static func findOrCreate(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatebatch(ids:in:_:)","title":"static func findOrCreateBatch(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatebatchsync(ids:in:_:)","title":"static func findOrCreateBatchSync(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/findorcreatesync(id:in:_:)","title":"static func findOrCreateSync(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/groupedvalue(of:where:limit:on:)","title":"static func groupedValue<V>(of: KeyPath<Self, V>, where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [V]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/paginate(for:pagekey:perpagekey:_:)","title":"static func paginate(for: Request, pageKey: String, perPageKey: String, [DatabaseQuery.Sort]) async throws -> Page<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/query(on:)-47lde","title":"static func query(on: Request) -> QueryBuilder<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/random(on:)","title":"static func random(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/random(on:count:)","title":"static func random(on: any Database, count: Int) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/reflectschema(on:configuration:)","title":"static func reflectSchema(on: any Database, configuration: ReflectionConfiguration?) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schema(for:)-4c3f4","title":"static func schema(for: any Database) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/selfsiblingmiddleware(from:to:)","title":"static func selfSiblingMiddleware<M>(from: KeyPath<Self, ParentProperty<Self, M>>, to: KeyPath<Self, ParentProperty<Self, M>>) -> SelfSiblingModelMiddleware<Self, M>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateall(in:transaction:)","title":"static func updateAll(in: any Database, transaction: Bool) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateall(in:transaction:modifications:)","title":"static func updateAll(in: any Database, transaction: Bool, modifications: (Self) -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallasync(in:transaction:modifications:)","title":"static func updateAllAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectively(in:transaction:modifications:)","title":"static func updateAllSelectively(in: any Database, transaction: Bool, modifications: (Self) -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectivelyasync(in:transaction:modifications:)","title":"static func updateAllSelectivelyAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallselectivelythrowing(in:transaction:continueonerror:modifications:)","title":"static func updateAllSelectivelyThrowing(in: any Database, transaction: Bool, continueOnError: Bool, modifications: (Self) throws -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updateallthrowing(in:transaction:modifications:)","title":"static func updateAllThrowing(in: any Database, transaction: Bool, modifications: (Self) throws -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/updatevalue(at:to:where:in:)","title":"static func updateValue<Property>(at: KeyPath<Self, Property>, to: Property.Value, where: ModelValueFilter<Self>..., in: any Database) async throws -> [Self]","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/model-implementations","title":"Model Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/defaultpagesize","title":"static var defaultPageSize: Int","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/maxpagesize","title":"static var maxPageSize: Int?","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/paginatable-implementations","title":"Paginatable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/resolvedparameter","title":"PivotEntity.ResolvedParameter","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/parameter","title":"static var parameter: String","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/parameter-implementations","title":"Parameter Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/resolvedparameter","title":"PivotEntity.ResolvedParameter","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/parameter","title":"static var parameter: String","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/parameter-implementations","title":"Parameter Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/decoderequest(_:)-2rin4","title":"static func decodeRequest(Request) -> EventLoopFuture<Self>","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/requestdecodable-implementations","title":"RequestDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/fluentextensions\/pivotentity\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/fluentextensions\/pivotentity\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schemaoralias","title":"static var schemaOrAlias: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/space","title":"static var space: String?","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/schema-implementations","title":"Schema Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentity\/schemaoralias","title":"static var schemaOrAlias: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentity\/space","title":"static var space: String?","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentity\/schema-implementations","title":"Schema Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/pivotentity","title":"PivotEntity","type":"class"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pivotentitydefaults\/defaultfromidfield","title":"static var defaultFromIDField: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pivotentitydefaults\/defaulttoidfield","title":"static var defaultToIDField: String","type":"property"}],"path":"\/documentation\/fluentextensions\/pivotentitydefaults","title":"PivotEntityDefaults","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.class\/init(nestedbuilders:fieldoverrides:fieldkeymap:)","title":"init(nestedBuilders: [String : QueryParameterFilter.Builder<M>.NestedBuilder], fieldOverrides: [String : QueryParameterFilter.Builder<M>.FieldOverride], fieldKeyMap: [String : FieldKey])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.class\/fieldkeymap","title":"var fieldKeyMap: [String : FieldKey]","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.class\/fieldoverrides","title":"var fieldOverrides: [String : QueryParameterFilter.Builder<M>.FieldOverride]","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.class\/nestedbuilders","title":"var nestedBuilders: [String : QueryParameterFilter.Builder<M>.NestedBuilder]","type":"property"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.class","title":"QueryParameterFilter.Builder.Config","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/init(_:schema:config:)","title":"init(QueryBuilder<M>, schema: String?, config: QueryParameterFilter.Builder<M>.Config)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/config-swift.property","title":"let config: QueryParameterFilter.Builder<M>.Config","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/query","title":"let query: QueryBuilder<M>","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/schema","title":"let schema: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/addnestedquerybuilder(for:builder:)","title":"func addNestedQueryBuilder(for: String, builder: QueryParameterFilter.Builder<M>.NestedBuilder)","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/addwhereoverride(for:override:)","title":"func addWhereOverride(for: String, override: QueryParameterFilter.Builder<M>.FieldOverride)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/fieldoverride","title":"QueryParameterFilter.Builder.FieldOverride","type":"typealias"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder\/nestedbuilder","title":"QueryParameterFilter.Builder.NestedBuilder","type":"typealias"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/builder","title":"QueryParameterFilter.Builder","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/init(schema:fieldname:withqueryvalueat:as:from:)","title":"convenience init(schema: any Schema.Type, fieldName: String, withQueryValueAt: String, as: (any Any.Type)?, from: any URLQueryContainer) throws","type":"init"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/init(schema:from:)","title":"convenience init(schema: any Schema.Type, from: any URLQueryContainer) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.property","title":"var method: QueryParameterFilter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/queryvaluetype","title":"var queryValueType: (any Any.Type)?","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/schema","title":"var schema: any Schema.Type","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/value-swift.property","title":"var value: QueryParameterFilter.Value<String>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/queryfield(for:)","title":"func queryField(for: (any Schema.Type)?) -> DatabaseQuery.Field","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/child(_:)-3woj8","title":"static func Child<Parent, Child>(ParentPropertyKeyPath<Parent, Child>) -> (QueryBuilder<Parent>, String, FilterCondition) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/child(_:)-5xjmv","title":"static func Child<Parent, Child>(OptionalParentPropertyKeyPath<Parent, Child>) -> (QueryBuilder<Parent>, String, FilterCondition) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/parent(_:)-5lx8s","title":"static func Parent<Parent, Child>(ParentPropertyKeyPath<Parent, Child>) -> (QueryBuilder<Child>, String, FilterCondition) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/parent(_:)-9jztx","title":"static func Parent<Parent, Child>(OptionalParentPropertyKeyPath<Parent, Child>) -> (QueryBuilder<Child>, String, FilterCondition) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/siblings(_:)","title":"static func Siblings<From, To, Through>(KeyPath<From, SiblingsProperty<From, To, Through>>) -> (QueryBuilder<From>, String, FilterCondition) throws -> DatabaseQuery.Filter?","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/arrincludes","title":"case arrIncludes","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/arrincludesall","title":"case arrIncludesAll","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/arrincludessome","title":"case arrIncludesSome","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/arriscontainedby","title":"case arrIsContainedBy","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/between","title":"case between","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/betweeninclusive","title":"case betweenInclusive","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/contains","title":"case contains","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/empty","title":"case empty","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/endswith","title":"case endsWith","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equals","title":"case equals","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equalsany","title":"case equalsAny","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equalsstring","title":"case equalsString","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equalsstringsensitive","title":"case equalsStringSensitive","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/filter","title":"case filter","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/fuzzy","title":"case fuzzy","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/greaterthan","title":"case greaterThan","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/greaterthanorequalto","title":"case greaterThanOrEqualTo","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/innumberrange","title":"case inNumberRange","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/includesstring","title":"case includesString","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/includesstringsensitive","title":"case includesStringSensitive","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/isnotnull","title":"case isNotNull","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/isnull","title":"case isNull","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/lessthan","title":"case lessThan","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/lessthanorequalto","title":"case lessThanOrEqualTo","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notcontains","title":"case notContains","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notempty","title":"case notEmpty","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notendswith","title":"case notEndsWith","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notequaltoany","title":"case notEqualToAny","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notequals","title":"case notEquals","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/notstartswith","title":"case notStartsWith","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/searchtext","title":"case searchText","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/startswith","title":"case startsWith","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/weakequals","title":"case weakEquals","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/expectedvaluetype","title":"var expectedValueType: QueryParameterFilter.Method.ParameterValueType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/todatabasequeryfiltermethod()","title":"func toDatabaseQueryFilterMethod() -> DatabaseQuery.Filter.Method","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/arrayvalues","title":"static var arrayValues: [QueryParameterFilter.Method]","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/rangevalues","title":"static var rangeValues: [QueryParameterFilter.Method]","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/bt","title":"case bt","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/bti","title":"case bti","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/ca","title":"case ca","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/cany","title":"case cany","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/cb","title":"case cb","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/ct","title":"case ct","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/emp","title":"case emp","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/eq","title":"case eq","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/es","title":"case es","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/ess","title":"case ess","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/ew","title":"case ew","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/fz","title":"case fz","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/gt","title":"case gt","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/gte","title":"case gte","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/in","title":"case `in`","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/inc","title":"case inc","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/incs","title":"case incs","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/lt","title":"case lt","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/lte","title":"case lte","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nct","title":"case nct","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nemp","title":"case nemp","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/neq","title":"case neq","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/new","title":"case new","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nin","title":"case nin","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nnul","title":"case nnul","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/notin","title":"case notIn","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nsw","title":"case nsw","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/nul","title":"case nul","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/rng","title":"case rng","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/st","title":"case st","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/sw","title":"case sw","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/wk","title":"case wk","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/tomethod()","title":"func toMethod() -> QueryParameterFilter.Method","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toschema(name:)-8p8zj","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toschema(name:)-fnzb","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType.Enum","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toschema(name:)-8p8zj","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toschema(name:)-fnzb","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType.Enum","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/decode(fromjson:using:)-4o3un","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/decode(fromjson:using:)-57efv","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/aliases","title":"QueryParameterFilter.Method.Aliases","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/multiple","title":"case multiple","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/range","title":"case range","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/single","title":"case single","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/parametervaluetype","title":"QueryParameterFilter.Method.ParameterValueType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/decode(fromjson:using:)-3oix6","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/decode(fromjson:using:)-9q8am","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/method-swift.enum","title":"QueryParameterFilter.Method","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/value-swift.enum\/multiple(_:)","title":"case multiple([S])","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/value-swift.enum\/range(_:)","title":"case range(QueryParameterRangeValue)","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfilter\/value-swift.enum\/single(_:)","title":"case single(S)","type":"case"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter\/value-swift.enum","title":"QueryParameterFilter.Value","type":"enum"}],"path":"\/documentation\/fluentextensions\/queryparameterfilter","title":"QueryParameterFilter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/reflectionconfiguration\/init(fieldkeymap:overrides:)","title":"init(fieldKeyMap: [String : FieldKey], overrides: (SchemaBuilder, ReflectedSchemaProperty) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/reflectionconfiguration\/fieldkeymap","title":"var fieldKeyMap: [String : FieldKey]","type":"property"},{"path":"\/documentation\/fluentextensions\/reflectionconfiguration\/override","title":"var override: (SchemaBuilder, ReflectedSchemaProperty) -> Bool","type":"property"}],"path":"\/documentation\/fluentextensions\/reflectionconfiguration","title":"ReflectionConfiguration","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/init(through:from:to:)","title":"init(through: Through.Type, from: KeyPath<Through, Through.Parent<M>>, to: KeyPath<Through, Through.Parent<M>>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/from","title":"let from: KeyPath<Through, Through.Parent<M>>","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/fromkeypath","title":"var fromKeyPath: KeyPath<Through, FieldProperty<Through, M.IDValue>>","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/pivots","title":"var pivots: [Through]","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/projectedvalue","title":"var projectedValue: SelfSiblingsProperty<M, Through>","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/to","title":"let to: KeyPath<Through, Through.Parent<M>>","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/tokeypath","title":"var toKeyPath: KeyPath<Through, FieldProperty<Through, M.IDValue>>","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/value-swift.property","title":"var value: [M]?","type":"property"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/wrappedvalue","title":"var wrappedValue: [M]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attach(_:method:on:_:)","title":"func attach(M, method: SelfSiblingsProperty<M, Through>.AttachMethod, on: any Database, (Through) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attach(_:on:_:)-6y7bz","title":"func attach(M, on: any Database, (Through) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attach(_:on:_:)-lys9","title":"func attach([M], on: any Database, (Through) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/detach(_:on:)","title":"func detach(M, on: any Database) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/isattached(to:on:)","title":"func isAttached(to: M, on: any Database) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/isattached(toid:on:)","title":"func isAttached(toID: M.IDValue, on: any Database) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/query(on:)","title":"func query(on: any Database) -> EventLoopFuture<QueryBuilder<M>>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/querypivot(on:)","title":"func queryPivot(on: any Database) -> QueryBuilder<Through>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/requireidvalue(_:)","title":"func requireIDValue(String) -> M.IDValue","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/sortids(_:_:)","title":"func sortIDs(M.IDValue, M.IDValue) -> (fromID: M.IDValue, toID: M.IDValue)","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/sortedids(toid:)","title":"func sortedIDs(toID: M.IDValue) -> (fromID: M.IDValue, toID: M.IDValue)","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/sqlquery(on:)","title":"func sqlQuery(on: any Database) -> SQLSelectBuilder","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod\/always","title":"case always","type":"case"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod\/ifnotexists","title":"case ifNotExists","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/attachmethod","title":"SelfSiblingsProperty.AttachMethod","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/skippropertyencoding","title":"var skipPropertyEncoding: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/decode(from:)","title":"func decode(from: any Decoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/anycodableproperty-implementations","title":"AnyCodableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/keys","title":"var keys: [FieldKey]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/input(to:)","title":"func input(to: any DatabaseInput)","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/output(from:)","title":"func output(from: any DatabaseOutput) throws","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/anydatabaseproperty-implementations","title":"AnyDatabaseProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/anyvalue","title":"var anyValue: Any?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/anyvaluetype","title":"static var anyValueType: any Any.Type","type":"property"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/anyproperty-implementations","title":"AnyProperty Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/model","title":"SelfSiblingsProperty.Model","type":"typealias"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/value-swift.typealias","title":"SelfSiblingsProperty.Value","type":"typealias"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/property-implementations","title":"Property Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/loadifneeded(reload:on:)","title":"func loadIfNeeded(reload: Bool, on: any Database) async throws","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/relation-implementations","title":"Relation Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/loadifneeded(reload:on:)","title":"func loadIfNeeded(reload: Bool, on: any Database) async throws","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty\/relation-implementations","title":"Relation Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/selfsiblingsproperty","title":"SelfSiblingsProperty","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/databaseschemadatatypeproviding\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/databaseschemadatatypeproviding","title":"DatabaseSchemaDataTypeProviding","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/joinable\/joined","title":"Joined","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/joinable\/joined(on:)","title":"func joined(on: Request) async throws -> Self.Joined","type":"method"}],"path":"\/documentation\/fluentextensions\/joinable","title":"Joinable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/migratable\/migration-1g10g","title":"static var migration: any Migration","type":"property"}],"title":"Migratable Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/migratable\/migration","title":"static var migration: any Migration","type":"property"}],"path":"\/documentation\/fluentextensions\/migratable","title":"Migratable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pagetransformer\/input","title":"Input","type":"associatedtype"},{"path":"\/documentation\/fluentextensions\/pagetransformer\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pagetransformer\/transform(datum:)","title":"func transform(datum: Self.Input) throws -> Self.Output","type":"method"}],"path":"\/documentation\/fluentextensions\/pagetransformer","title":"PageTransformer","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/paginatable\/defaultpagesize-31dts","title":"static var defaultPageSize: Int","type":"property"}],"title":"Paginatable Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/paginatable\/defaultpagesize","title":"static var defaultPageSize: Int","type":"property"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/paginatable\/maxpagesize-1ndm2","title":"static var maxPageSize: Int?","type":"property"}],"title":"Paginatable Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/paginatable\/maxpagesize","title":"static var maxPageSize: Int?","type":"property"}],"path":"\/documentation\/fluentextensions\/paginatable","title":"Paginatable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/querypaginating\/paginateddata","title":"PaginatedData","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/querypaginating\/paginate(_:)","title":"func paginate(PageRequest) async throws -> Page<Self.PaginatedData>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/querypaginating\/paginate(for:pagekey:perpagekey:)-6aa5v","title":"func paginate(for: Request, pageKey: String, perPageKey: String) async throws -> Page<Self.PaginatedData>","type":"method"}],"title":"QueryPaginating Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/querypaginating\/paginate(for:pagekey:perpagekey:)","title":"func paginate(for: Request, pageKey: String, perPageKey: String) async throws -> Page<Self.PaginatedData>","type":"method"}],"path":"\/documentation\/fluentextensions\/querypaginating","title":"QueryPaginating","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/reflectionmigration\/modeltype","title":"ModelType","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/reflectionmigration\/config-4kks2","title":"var config: ReflectionConfiguration","type":"property"}],"title":"ReflectionMigration Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/reflectionmigration\/config","title":"var config: ReflectionConfiguration","type":"property"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/reflectionmigration\/fieldkeymap-5qi0h","title":"var fieldKeyMap: [String : FieldKey]","type":"property"}],"title":"ReflectionMigration Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/reflectionmigration\/fieldkeymap","title":"var fieldKeyMap: [String : FieldKey]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/reflectionmigration\/customize(schema:)-ykye","title":"func customize(schema: SchemaBuilder) -> SchemaBuilder","type":"method"}],"title":"ReflectionMigration Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/reflectionmigration\/customize(schema:)","title":"func customize(schema: SchemaBuilder) -> SchemaBuilder","type":"method"},{"children":[{"children":[{"path":"\/documentation\/fluentextensions\/reflectionmigration\/override(schema:property:)-9gtto","title":"func override(schema: SchemaBuilder, property: ReflectedSchemaProperty) -> Bool","type":"method"}],"title":"ReflectionMigration Implementations","type":"groupMarker"}],"path":"\/documentation\/fluentextensions\/reflectionmigration\/override(schema:property:)","title":"func override(schema: SchemaBuilder, property: ReflectedSchemaProperty) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/reflectionmigration","title":"ReflectionMigration","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/softdeletable\/deletedat","title":"var deletedAt: Date?","type":"property"}],"path":"\/documentation\/fluentextensions\/softdeletable","title":"SoftDeletable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/timestampable\/timestampformat","title":"TimestampFormat","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/timestampable\/createdat","title":"var createdAt: Date?","type":"property"},{"path":"\/documentation\/fluentextensions\/timestampable\/updatedat","title":"var updatedAt: Date?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/timestampable\/createdatkey","title":"static var createdAtKey: Self.TimestampKeyPath<Self.TimestampFormat>","type":"property"},{"path":"\/documentation\/fluentextensions\/timestampable\/updatedatkey","title":"static var updatedAtKey: Self.TimestampKeyPath<Self.TimestampFormat>","type":"property"}],"path":"\/documentation\/fluentextensions\/timestampable","title":"Timestampable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/childrendiff","title":"ChildrenDiff","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/countresult\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/countresult\/count","title":"let count: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/countresult\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/countresult\/decode(fromjson:using:)-7e1th","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/decode(fromjson:using:)-9w64j","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/countresult\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/countresult\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/countresult\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/countresult\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/countresult","title":"CountResult","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/init(label:value:)","title":"init(label: String, value: V)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/label","title":"var label: String","type":"property"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/value","title":"var value: V","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/decode(fromjson:using:)-8hcli","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/decode(fromjson:using:)-lm8i","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/labeledvalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/labeledvalue\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/labeledvalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/labeledvalue","title":"LabeledValue","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/mirroredproperty\/fieldkey","title":"var fieldKey: FieldKey","type":"property"},{"path":"\/documentation\/fluentextensions\/mirroredproperty\/fieldname","title":"var fieldName: String","type":"property"},{"path":"\/documentation\/fluentextensions\/mirroredproperty\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/fluentextensions\/mirroredproperty\/type","title":"let type: any Any.Type","type":"property"}],"path":"\/documentation\/fluentextensions\/mirroredproperty","title":"MirroredProperty","type":"struct"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/pagination\/defaults\/maxpagesize","title":"static var maxPageSize: Int?","type":"property"},{"path":"\/documentation\/fluentextensions\/pagination\/defaults\/pagekey","title":"static var pageKey: String","type":"property"},{"path":"\/documentation\/fluentextensions\/pagination\/defaults\/pagesize","title":"static var pageSize: Int","type":"property"},{"path":"\/documentation\/fluentextensions\/pagination\/defaults\/perpagekey","title":"static var perPageKey: String","type":"property"}],"path":"\/documentation\/fluentextensions\/pagination\/defaults","title":"Pagination.Defaults","type":"class"}],"path":"\/documentation\/fluentextensions\/pagination","title":"Pagination","type":"struct"},{"path":"\/documentation\/fluentextensions\/queryparameterrangevalue","title":"QueryParameterRangeValue","type":"struct"},{"path":"\/documentation\/fluentextensions\/queryparametersearchfilter","title":"QueryParameterSearchFilter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcase\/init(when:else:)-75hsv","title":"init(when: (any SQLExpression, any SQLExpression)..., else: (any SQLExpression)?)","type":"init"},{"path":"\/documentation\/fluentextensions\/sqlcase\/init(when:else:)-l1pr","title":"init(when: [(any SQLExpression, any SQLExpression)], else: (any SQLExpression)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcase\/alternative","title":"var alternative: (any SQLExpression)?","type":"property"},{"path":"\/documentation\/fluentextensions\/sqlcase\/cases","title":"var cases: [(condition: any SQLExpression, predicate: any SQLExpression)]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcase\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcase\/case(when:else:)","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlcase\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlcase\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlcase\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sqlcase","title":"SQLCase","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcast\/init(_:as:)","title":"init(any SQLExpression, as: SQLDataType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcast\/expression","title":"var expression: any SQLExpression","type":"property"},{"path":"\/documentation\/fluentextensions\/sqlcast\/type","title":"var type: SQLDataType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcast\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlcast\/case(when:else:)","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlcast\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlcast\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlcast\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sqlcast","title":"SQLCast","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlunion\/init(_:)-1bs8i","title":"init(any SQLExpression...)","type":"init"},{"path":"\/documentation\/fluentextensions\/sqlunion\/init(_:)-e6u8","title":"init([any SQLExpression])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlunion\/args","title":"let args: [any SQLExpression]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlunion\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlunion\/case(when:else:)","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlunion\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlunion\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlunion\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sqlunion","title":"SQLUnion","type":"struct"},{"path":"\/documentation\/fluentextensions\/selfsiblingidsorter","title":"SelfSiblingIDSorter","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/create(model:on:next:)","title":"func create(model: Through, on: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/delete(model:force:on:next:)","title":"func delete(model: Self.Model, force: Bool, on: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/handle(_:_:on:chainingto:)","title":"func handle(ModelEvent, any AnyModel, on: any Database, chainingTo: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/restore(model:on:next:)","title":"func restore(model: Self.Model, on: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/softdelete(model:on:next:)","title":"func softDelete(model: Self.Model, on: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/update(model:on:next:)","title":"func update(model: Self.Model, on: any Database, next: any AnyModelResponder) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware\/modelmiddleware-implementations","title":"ModelMiddleware Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/selfsiblingmodelmiddleware","title":"SelfSiblingModelMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sumrow\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sumrow\/sum","title":"var sum: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sumrow\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sumrow\/decode(fromjson:using:)-1b38","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/decode(fromjson:using:)-5ygev","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/sumrow\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sumrow\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/sumrow\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/sumrow\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sumrow","title":"SumRow","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/all(_:)-56yvq","title":"func ALL(any SQLExpression...) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/all(_:)-9shmy","title":"func ALL([any SQLExpression]) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/any(_:)-5y17z","title":"func ANY([any SQLExpression]) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/any(_:)-tnzb","title":"func ANY(any SQLExpression...) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/cast(_:as:)","title":"func CAST(any SQLExpression, as: SQLDataType) -> SQLCast","type":"func"},{"path":"\/documentation\/fluentextensions\/coalesce(_:)-49io4","title":"func COALESCE([any SQLExpression]) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/coalesce(_:)-5d2yu","title":"func COALESCE(any SQLExpression...) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/count(_:)-5zm31","title":"func COUNT([any SQLExpression]) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/count(_:)-994wx","title":"func COUNT(any SQLExpression...) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/sum(_:)","title":"func SUM(any SQLExpression) -> SQLFunction","type":"func"},{"path":"\/documentation\/fluentextensions\/union(_:)-9scny","title":"func UNION(any SQLExpression...) -> SQLUnion","type":"func"},{"path":"\/documentation\/fluentextensions\/union(_:)-rtxc","title":"func UNION([any SQLExpression]) -> SQLUnion","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/asyncbatchaction","title":"AsyncBatchAction","type":"typealias"},{"path":"\/documentation\/fluentextensions\/childrenpropertykeypath","title":"ChildrenPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/createmodel","title":"CreateModel","type":"typealias"},{"path":"\/documentation\/fluentextensions\/fieldpropertykeypath","title":"FieldPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/fluentresourcemodel","title":"FluentResourceModel","type":"typealias"},{"path":"\/documentation\/fluentextensions\/foreignidpropertykeypath","title":"ForeignIDPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/idpropertykeypath","title":"IDPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/labeledcount","title":"LabeledCount","type":"typealias"},{"path":"\/documentation\/fluentextensions\/modelinitializer","title":"ModelInitializer","type":"typealias"},{"path":"\/documentation\/fluentextensions\/optionalchildpropertykeypath","title":"OptionalChildPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/optionalfieldpropertykeypath","title":"OptionalFieldPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/optionalparentpropertykeypath","title":"OptionalParentPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/parentpropertykeypath","title":"ParentPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/queryparamfieldkeyconverter","title":"QueryParamFieldKeyConverter","type":"typealias"},{"path":"\/documentation\/fluentextensions\/queryablepropertykeypath","title":"QueryablePropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/rangefilterable","title":"RangeFilterable","type":"typealias"},{"path":"\/documentation\/fluentextensions\/readmodel","title":"ReadModel","type":"typealias"},{"path":"\/documentation\/fluentextensions\/reflectedschemaproperty","title":"ReflectedSchemaProperty","type":"typealias"},{"path":"\/documentation\/fluentextensions\/resourcemodel","title":"ResourceModel","type":"typealias"},{"path":"\/documentation\/fluentextensions\/searchresultmodel","title":"SearchResultModel","type":"typealias"},{"path":"\/documentation\/fluentextensions\/siblingpropertykeypath","title":"SiblingPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/timestamppropertykeypath","title":"TimestampPropertyKeyPath","type":"typealias"},{"path":"\/documentation\/fluentextensions\/updatemodel","title":"UpdateModel","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/and(_:)","title":"case and([FilterCondition])","type":"case"},{"path":"\/documentation\/fluentextensions\/filtercondition\/or(_:)","title":"case or([FilterCondition])","type":"case"},{"path":"\/documentation\/fluentextensions\/filtercondition\/where(field:method:value:)","title":"case `where`(field: String, method: QueryParameterFilter.Method, value: AnyCodable)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/decoded(from:)","title":"static func decoded(from: String) throws -> FilterCondition","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/decode(fromjson:using:)-5556t","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/decode(fromjson:using:)-5b0uf","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/filtercondition\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/filtercondition\/copycodable(encoder:decoder:)","title":"func copyCodable(encoder: JSONEncoder, decoder: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encode(encoder:decoder:withtransformers:)","title":"func encode(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encodeasjsondata(including:encoder:decoder:)","title":"func encodeAsJSONData(including: [String : Any], encoder: JSONEncoder, decoder: JSONDecoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encodeasjsondata(using:)","title":"func encodeAsJSONData(using: JSONEncoder) throws -> Data","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encodeasjsonstring(encoder:stringencoding:)","title":"func encodeAsJSONString(encoder: JSONEncoder, stringEncoding: String.Encoding) throws -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encodeasurlqueryitems(using:)","title":"func encodeAsURLQueryItems(using: URLQueryItemEncoder) throws -> [URLQueryItem]","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/encodereflectively(to:)","title":"func encodeReflectively(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/toanycodabledictionary(encoder:decoder:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/toanycodabledictionary(encoder:decoder:withtransformers:)","title":"func toAnyCodableDictionary(encoder: JSONEncoder, decoder: JSONDecoder, withTransformers: [String : any CodableTransformer]) throws -> AnyCodableDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/toanydictionary(encoder:decoder:)","title":"func toAnyDictionary(encoder: JSONEncoder, decoder: JSONDecoder) throws -> AnyDictionary","type":"method"},{"path":"\/documentation\/fluentextensions\/filtercondition\/wrapasanycodable()","title":"func wrapAsAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/fluentextensions\/filtercondition\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/filtercondition","title":"FilterCondition","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentcommand\/create","title":"case create","type":"case"},{"path":"\/documentation\/fluentextensions\/fluentcommand\/delete(force:)","title":"case delete(force: Bool)","type":"case"},{"path":"\/documentation\/fluentextensions\/fluentcommand\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/fluentcommand\/update","title":"case update","type":"case"},{"path":"\/documentation\/fluentextensions\/fluentcommand\/upsert","title":"case upsert","type":"case"}],"path":"\/documentation\/fluentextensions\/fluentcommand","title":"FluentCommand","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/body","title":"case body","type":"case"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/bodysize","title":"case bodySize","type":"case"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/cookies","title":"case cookies","type":"case"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/headers","title":"case headers","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/networkloggerdetailelement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/networkloggerdetailelement","title":"NetworkLoggerDetailElement","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel\/basic","title":"case basic","type":"case"},{"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel\/detailed","title":"case detailed","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/networkloggerdetaillevel","title":"NetworkLoggerDetailLevel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/update","title":"case update","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/default","title":"static var `default`: PUTRouteAction","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/decode(fromjson:using:)-7bffa","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/decode(fromjson:using:)-9co1m","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/putrouteaction\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/putrouteaction\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/putrouteaction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/putrouteaction","title":"PUTRouteAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/paginationerror\/invalidpagenumber(_:)","title":"case invalidPageNumber(Int)","type":"case"},{"path":"\/documentation\/fluentextensions\/paginationerror\/invalidpersize(_:)","title":"case invalidPerSize(Int)","type":"case"},{"path":"\/documentation\/fluentextensions\/paginationerror\/unspecified(_:)","title":"case unspecified(any Error)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/paginationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/paginationerror\/isnetworkconnectionerror()","title":"func isNetworkConnectionError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/paginationerror\/isusernetworkconnectionunavailableerror()","title":"func isUserNetworkConnectionUnavailableError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/paginationerror\/keyvaluedescription()","title":"func keyValueDescription() -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/paginationerror\/printdescription()","title":"func printDescription()","type":"method"}],"path":"\/documentation\/fluentextensions\/paginationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/paginationerror","title":"PaginationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/invalidfilterconfiguration","title":"case invalidFilterConfiguration","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/invalidrangevalues","title":"case invalidRangeValues","type":"case"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/unsupportedfilteroperation","title":"case unsupportedFilterOperation","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/isnetworkconnectionerror()","title":"func isNetworkConnectionError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/isusernetworkconnectionunavailableerror()","title":"func isUserNetworkConnectionUnavailableError() -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/keyvaluedescription()","title":"func keyValueDescription() -> String","type":"method"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/printdescription()","title":"func printDescription()","type":"method"}],"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/fluentextensions\/queryparameterfiltererror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/queryparameterfiltererror","title":"QueryParameterFilterError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/betweenexclusive","title":"case betweenExclusive","type":"case"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/betweenexclusivegreaterthan","title":"case betweenExclusiveGreaterThan","type":"case"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/betweenexclusivelessthan","title":"case betweenExclusiveLessThan","type":"case"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/betweeninclusive","title":"case betweenInclusive","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/caseset","title":"static var caseSet: Set<Self>","type":"property"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/rangeoperators\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fluentextensions\/rangeoperators\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/rangeoperators","title":"RangeOperators","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/removalmethod\/delete(force:)","title":"case delete(force: Bool)","type":"case"},{"path":"\/documentation\/fluentextensions\/removalmethod\/detach","title":"case detach","type":"case"}],"path":"\/documentation\/fluentextensions\/removalmethod","title":"RemovalMethod","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/savemethod\/upsert","title":"case upsert","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/default","title":"static var `default`: SaveMethod","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/savemethod\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/savemethod\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/savemethod\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/decode(fromjson:using:)-265hk","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/savemethod\/decode(fromjson:using:)-82959","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/savemethod\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/savemethod\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/savemethod\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/savemethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/savemethod","title":"SaveMethod","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/save","title":"case save","type":"case"},{"path":"\/documentation\/fluentextensions\/updatemethod\/update","title":"case update","type":"case"},{"path":"\/documentation\/fluentextensions\/updatemethod\/upsert","title":"case upsert","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/default","title":"static var `default`: UpdateMethod","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/decodereflectively(from:overwritesmissingkeysasnilvalues:)","title":"func decodeReflectively(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/updatemethod\/settypedvalue(for:using:overwritesmissingkeysasnilvalues:)","title":"func setTypedValue(for: PropertyInfo, using: KeyedDecodingContainer<DynamicCodingKey>, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/updatemethod\/update(from:overwritesmissingkeysasnilvalues:)","title":"func update(from: any Decoder, overwritesMissingKeysAsNilValues: Bool) throws","type":"method"},{"path":"\/documentation\/fluentextensions\/updatemethod\/update(with:decoder:)","title":"func update(with: Data, decoder: JSONDecoder) throws -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/decode(fromjson:using:)-78isl","title":"static func decode(fromJSON: Data, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/updatemethod\/decode(fromjson:using:)-9diiv","title":"static func decode(fromJSON: String, using: JSONDecoder) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/updatemethod\/decode(fromqueryitems:decoder:encoder:)","title":"static func decode(fromQueryItems: [URLQueryItem], decoder: JSONDecoder, encoder: JSONEncoder) throws -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/updatemethod\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/updatemethod\/equaltoany(of:)","title":"func equalToAny(of: [Self]) -> Bool","type":"method"}],"path":"\/documentation\/fluentextensions\/updatemethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/updatemethod","title":"UpdateMethod","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/codability\/anycodable\/casttoencodable(value:)","title":"func castToEncodable(value: Any) -> any Encodable","type":"method"},{"path":"\/documentation\/fluentextensions\/codability\/anycodable\/encodableinnervalue()","title":"func encodableInnerValue() -> any Encodable","type":"method"},{"path":"\/documentation\/fluentextensions\/codability\/anycodable\/todatabasequeryvalue()","title":"func toDatabaseQueryValue() -> DatabaseQuery.Value","type":"method"}],"path":"\/documentation\/fluentextensions\/codability\/anycodable","title":"AnyCodable","type":"extension"}],"path":"\/documentation\/fluentextensions\/codability","title":"Codability","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/all(in:)","title":"func all(in: any Database) async throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/attach(_:updatingby:in:)","title":"func attach([To], updatingBy: UpdateMethod, in: any Database) async throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/detach(_:in:)","title":"func detach([To], in: any Database) async throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/detachall(on:)","title":"func detachAll(on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/diffwithexistingchildren(_:in:)","title":"func diffWithExistingChildren([To], in: any Database) async throws -> ChildrenDiff<To>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/includes(_:in:)","title":"func includes(To, in: any Database) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/markforattachment(_:)","title":"func markForAttachment([To]) throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/markfordetachment(_:)","title":"func markForDetachment([To]) throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/remove(children:by:in:)","title":"func remove(children: [To], by: RemovalMethod, in: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty\/replace(with:deleteorphaned:in:)","title":"func replace(with: [To], deleteOrphaned: Bool, in: any Database) async throws -> [To]","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/childrenproperty","title":"ChildrenProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/enumproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/enumproperty","title":"EnumProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldproperty\/reflectenumcollectionschema(with:to:)","title":"static func reflectEnumCollectionSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldproperty\/reflectenumschema(with:to:)","title":"static func reflectEnumSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/fieldproperty","title":"FieldProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/groupproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/groupproperty","title":"GroupProperty","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/idproperty\/tostring()","title":"func toString() -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/idproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/idproperty","title":"IDProperty","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/migrations\/add(_:to:)-7exnp","title":"func add(any Migratable.Type, to: DatabaseID?)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/migrations\/add(_:to:)-9igmr","title":"func add(any Migratable.Type..., to: DatabaseID?)","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/migrations\/add(_:to:)-9u6tq","title":"func add([any Migratable.Type], to: DatabaseID?)","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/migrations","title":"Migrations","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/optionalenumproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/optionalenumproperty","title":"OptionalEnumProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/optionalfieldproperty\/reflectenumcollectionschema(with:to:)","title":"static func reflectEnumCollectionSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/optionalfieldproperty\/reflectenumschema(with:to:)","title":"static func reflectEnumSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/optionalfieldproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/optionalfieldproperty","title":"OptionalFieldProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/optionalparentproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/optionalparentproperty","title":"OptionalParentProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/parentproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/parentproperty","title":"ParentProperty","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/allids()","title":"func allIDs() async throws -> [Model.IDValue]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/allvalues(at:)-303gr","title":"func allValues<V>(at: KeyPath<Model, V>) async throws -> [V]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/allvalues(at:)-4iiqh","title":"func allValues<V>(at: KeyPath<Model, V?>) async throws -> [V]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/and(_:)-1u635","title":"func and(ModelValueFilter<Model>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/and(_:)-1xtyh","title":"func and((QueryBuilder<Model>) throws -> ()) rethrows -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/and(_:)-2fmpu","title":"func and(DatabaseQuery.Filter...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/assertnone(or:)","title":"func assertNone(or: any Error) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/at(most:)-5il27","title":"func at(most: Int?) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/at(most:)-8sefh","title":"func at(most: Int) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/convert(with:)","title":"func convert(with: any SQLConverterDelegate) throws -> any SQLQueryBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/deduplicatejoinstosametable()","title":"func deduplicateJoinsToSameTable() -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/emptyresult()","title":"func emptyResult() -> Model?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/emptyresults()","title":"func emptyResults() -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:)-1y2ve","title":"func filter([ModelValueFilter<Model>]) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:)-3mdgj","title":"func filter(ModelValueFilter<Model>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:)-xhk3","title":"func filter(QueryParameterFilter) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:_:)","title":"func filter<Through, To>(KeyPath<Model, SiblingsProperty<Model, To, Through>>, ModelValueFilter<To>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:_:_:)","title":"func filter<Through, To, V>(KeyPath<Model, SiblingsProperty<Model, To, Through>>, KeyPath<To, FieldProperty<To, V>>, V) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:_:values:)","title":"func filter<Through, To, V>(KeyPath<Model, SiblingsProperty<Model, To, Through>>, KeyPath<To, FieldProperty<To, V>>, values: [V]) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-2u7kx","title":"func filter<P>(KeyPath<Model, P>, to: ClosedRange<P.Value>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-4czkh","title":"func filter<P>(KeyPath<Model, P>, to: Range<P.Value>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-67saa","title":"func filter<P>(KeyPath<Model, P>, to: Range<P.Value>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-6tgog","title":"func filter<F, P>(KeyPath<Model, P>, to: ClosedRange<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-73aiz","title":"func filter<F, P>(KeyPath<Model, P>, to: Range<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:to:)-9z6b6","title":"func filter<P>(KeyPath<Model, P>, to: ClosedRange<P.Value>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:torangeat:on:)-3ob3i","title":"func filter<F, P>(KeyPath<Model, P>, toRangeAt: String, on: Request) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:torangeat:on:)-92gzs","title":"func filter<P>(KeyPath<Model, P>, toRangeAt: String, on: Request) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:torangeat:on:)-m8gs","title":"func filter<P>(KeyPath<Model, P>, toRangeAt: String, on: Request) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:withqueryvalueat:as:on:)","title":"func filter(any CodingKeyRepresentable, withQueryValueAt: String, as: (any Any.Type)?, on: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filter(_:withqueryvalueat:on:)","title":"func filter(ReflectedSchemaProperty, withQueryValueAt: String?, on: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filterbyqueryparameters(request:)","title":"func filterByQueryParameters(request: Request) throws -> QueryBuilder<Model>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filtercreated(to:)-1foyo","title":"func filterCreated(to: ClosedRange<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filtercreated(to:)-36nmu","title":"func filterCreated(to: Range<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filterupdated(to:)-2nies","title":"func filterUpdated(to: ClosedRange<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filterupdated(to:)-3jqtz","title":"func filterUpdated(to: Range<Date>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filterwithqueryparameter(at:in:builder:)","title":"func filterWithQueryParameter(at: String, in: Request, builder: QueryParameterFilter.Builder<Model>?) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/filterwithqueryparameterstring(_:builder:)","title":"func filterWithQueryParameterString(String, builder: QueryParameterFilter.Builder<Model>?) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/groupby(_:)","title":"func groupBy<T>(KeyPath<Model, T>?) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/groupedvalues(of:limit:)","title":"func groupedValues<T>(of: KeyPath<Model, T>, limit: Int?) async throws -> [T]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/isjoined(to:)","title":"func isJoined(to: any Schema) -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/join(_:on:method:where:)","title":"func join<Foreign, Local, Value>(Foreign.Type, on: JoinFilter<Foreign, Local, Value>, method: DatabaseQuery.Join.Method, where: ModelValueFilter<Foreign>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/join(on:method:)","title":"func join<Foreign, Local, Value>(on: JoinFilter<Foreign, Local, Value>, method: DatabaseQuery.Join.Method) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/join(parent:method:where:)","title":"func join<To>(parent: KeyPath<Model, ParentProperty<Model, To>>, method: DatabaseQuery.Join.Method, where: ModelValueFilter<To>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/join(siblings:where:)","title":"func join<To, Through>(siblings: KeyPath<Model, SiblingsProperty<Model, To, Through>>, where: ModelValueFilter<Through>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/optionallyfilter(_:if:)","title":"func optionallyFilter(ModelValueFilter<Model>, if: @autoclosure () -> Bool) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/or(_:)-14ej2","title":"func or((QueryBuilder<Model>) throws -> ()) rethrows -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/or(_:)-2wmcv","title":"func or(ModelValueFilter<Model>...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/or(_:)-34zdh","title":"func or(DatabaseQuery.Filter...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/random()","title":"func random() async throws -> Model?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/randomslice(count:)","title":"func randomSlice(count: Int) async throws -> [Model]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/sort(_:)","title":"func sort([DatabaseQuery.Sort]) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/sort(_:_:)","title":"func sort(String, DatabaseQuery.Sort.Direction) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/sorted(byqueryparamsat:convertingkeyswith:on:)","title":"func sorted(byQueryParamsAt: String, convertingKeysWith: QueryParamFieldKeyConverter?, on: Request) throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/sorts(byqueryparamsat:convertingkeyswith:on:)","title":"func sorts(byQueryParamsAt: String, convertingKeysWith: QueryParamFieldKeyConverter?, on: Request) throws -> [DatabaseQuery.Sort]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/update(_:to:whereequalto:)","title":"func update<P>(KeyPath<Model, P>, to: P.Value, whereEqualTo: P.Value) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/update(_:to:whereequaltoany:)","title":"func update<P>(KeyPath<Model, P>, to: P.Value, whereEqualToAny: [P.Value]) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/values(of:limit:)","title":"func values<T>(of: KeyPath<Model, T>, limit: Int?) async throws -> [T]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/paginate(for:pagekey:perpagekey:)","title":"func paginate(for: Request, pageKey: String, perPageKey: String) async throws -> Page<Self.PaginatedData>","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/querypaginating-implementations","title":"QueryPaginating Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/fluentkit\/querybuilder","title":"QueryBuilder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder\/field(_:_:isenum:_:)","title":"func field(FieldKey, any Any.Type, isEnum: Bool, DatabaseSchema.FieldConstraint...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder\/intid(auto:)","title":"func intID(auto: Bool) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder\/reflectschema(for:fieldkeybuilder:)","title":"func reflectSchema(for: ReflectedSchemaProperty, fieldKeyBuilder: (ReflectedSchemaProperty) -> FieldKey) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder\/reflectschema(of:fieldkeybuilder:)","title":"func reflectSchema<M>(of: M.Type, fieldKeyBuilder: (ReflectedSchemaProperty) -> FieldKey) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder\/stringid(auto:)","title":"func stringID(auto: Bool) -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/schemabuilder","title":"SchemaBuilder","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/init(through:)","title":"convenience init(through: Through.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/pivottype-swift.property","title":"var pivotType: Through.Type","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/all(on:)","title":"func all(on: any Database) async throws -> [To]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/includes(_:on:)","title":"func includes(Through, on: any Database) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/replace(with:on:by:_:)","title":"func replace(with: [To], on: any Database, by: RemovalMethod, (Through) -> ()) async throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty\/pivottype-swift.type.property","title":"static var pivotType: Through.Type","type":"property"}],"path":"\/documentation\/fluentextensions\/fluentkit\/siblingsproperty","title":"SiblingsProperty","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/timestampproperty\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/timestampproperty","title":"TimestampProperty","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/automigrate(_:)","title":"func autoMigrate<M>(M.Type) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/query(_:decoding:)","title":"func query<R>(String, decoding: R.Type) async throws -> [R]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/reflectschema(_:configuration:)","title":"func reflectSchema<M>(M.Type, configuration: ReflectionConfiguration?) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/select()","title":"func select() -> SQLSelectBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/select(_:)","title":"func select<M>(M.Type) -> SQLSelectBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/select(from:)","title":"func select(from: any SQLExpression) -> SQLSelectBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/sql()","title":"func sql() -> any SQLDatabase","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/sqlraw(_:)","title":"func sqlRaw(String) -> SQLRawBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/database\/transactionthrowing(_:)","title":"func transactionThrowing<T>((any Database) async throws -> T) async throws -> T","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/database","title":"Database","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/assertexistingentitywithid(on:)","title":"func assertExistingEntityWithId(on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/create(in:)","title":"func create(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/delete(from:force:)","title":"func delete(from: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/existingentitywithid(on:)","title":"func existingEntityWithId(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/ischild(_:in:)","title":"func isChild<M>(ChildrenProperty<M, Self>, in: any Database) async throws -> Bool","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/replace(with:on:)","title":"func replace(with: Self, on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/replacechildren(with:through:in:)","title":"func replaceChildren<C>(with: [C], through: ChildrenPropertyKeyPath<Self, C>, in: any Database) async throws -> [C]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/restore(in:)","title":"func restore(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/save(in:)","title":"func save(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/update(in:)","title":"func update(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/update(in:force:)","title":"func update(in: any Database, force: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateifexists(in:)","title":"func updateIfExists(in: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updatewithkeyvalues(of:on:)","title":"func updateWithKeyValues(of: Self, on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/upsert(in:)","title":"func upsert(in: any Database) async throws -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/selfsiblings","title":"Model.SelfSiblings","type":"typealias"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/timestampkeypath","title":"Model.TimestampKeyPath","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/crudpathname","title":"static var crudPathName: String","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/idfieldkey","title":"static var idFieldKey: FieldKey","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/idkeystringpath","title":"static var idKeyStringPath: String","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/idproperty","title":"static var idProperty: IDProperty<Self, Self.IDValue>","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/idpropertykeypath","title":"static var idPropertyKeyPath: KeyPath<Self, IDProperty<Self, Self.IDValue>>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/automigrate(on:)","title":"static func autoMigrate(on: any Database) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/create(id:in:_:)","title":"static func create(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/createbatch(size:in:_:)","title":"static func createBatch(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/createbatchsync(size:in:_:)","title":"static func createBatchSync(size: Int, in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/createsync(id:in:_:)","title":"static func createSync(id: Self.IDValue?, in: any Database, () -> Self) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/deleteall(force:in:transaction:)","title":"static func deleteAll(force: Bool, in: any Database, transaction: Bool) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/find(_:on:)","title":"static func find([Self.IDValue], on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/find(_:value:on:)","title":"static func find<V>(KeyPath<Self, V>, value: V.Value, on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/find(where:on:)-3uwr6","title":"static func find(where: [ModelValueFilter<Self>], on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/find(where:on:)-4pw9n","title":"static func find(where: ModelValueFilter<Self>..., on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findall(_:value:limit:on:)","title":"static func findAll<V>(KeyPath<Self, FieldProperty<Self, V>>, value: V, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findall(where:groupedby:limit:on:)-23cte","title":"static func findAll<G>(where: ModelValueFilter<Self>..., groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findall(where:groupedby:limit:on:)-2umnh","title":"static func findAll<G>(where: [ModelValueFilter<Self>], groupedBy: KeyPath<Self, G>?, limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findall(where:limit:on:)-4rexk","title":"static func findAll(where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findall(where:limit:on:)-8smpy","title":"static func findAll(where: ModelValueFilter<Self>..., limit: Int?, on: any Database) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findorcreate(id:in:_:)","title":"static func findOrCreate(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findorcreatebatch(ids:in:_:)","title":"static func findOrCreateBatch(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findorcreatebatchsync(ids:in:_:)","title":"static func findOrCreateBatchSync(ids: [Self.IDValue], in: any Database, ModelInitializer<Self>) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/findorcreatesync(id:in:_:)","title":"static func findOrCreateSync(id: Self.IDValue, in: any Database, ModelInitializer<Self>) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/groupedvalue(of:where:limit:on:)","title":"static func groupedValue<V>(of: KeyPath<Self, V>, where: [ModelValueFilter<Self>], limit: Int?, on: any Database) async throws -> [V]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/nextid(on:)","title":"static func nextID(on: any Database) async throws -> Self.IDValue","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/paginate(for:pagekey:perpagekey:_:)","title":"static func paginate(for: Request, pageKey: String, perPageKey: String, [DatabaseQuery.Sort]) async throws -> Page<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/query(on:)","title":"static func query(on: Request) -> QueryBuilder<Self>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/random(on:)","title":"static func random(on: any Database) async throws -> Self?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/random(on:count:)","title":"static func random(on: any Database, count: Int) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/reflectschema(on:configuration:)","title":"static func reflectSchema(on: any Database, configuration: ReflectionConfiguration?) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/schema(for:)","title":"static func schema(for: any Database) -> SchemaBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/selfsiblingmiddleware(from:to:)","title":"static func selfSiblingMiddleware<M>(from: KeyPath<Self, ParentProperty<Self, M>>, to: KeyPath<Self, ParentProperty<Self, M>>) -> SelfSiblingModelMiddleware<Self, M>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateall(in:transaction:)","title":"static func updateAll(in: any Database, transaction: Bool) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateall(in:transaction:modifications:)","title":"static func updateAll(in: any Database, transaction: Bool, modifications: (Self) -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateallasync(in:transaction:modifications:)","title":"static func updateAllAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateallselectively(in:transaction:modifications:)","title":"static func updateAllSelectively(in: any Database, transaction: Bool, modifications: (Self) -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateallselectivelyasync(in:transaction:modifications:)","title":"static func updateAllSelectivelyAsync(in: any Database, transaction: Bool, modifications: (Self) async -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateallselectivelythrowing(in:transaction:continueonerror:modifications:)","title":"static func updateAllSelectivelyThrowing(in: any Database, transaction: Bool, continueOnError: Bool, modifications: (Self) throws -> Self?) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updateallthrowing(in:transaction:modifications:)","title":"static func updateAllThrowing(in: any Database, transaction: Bool, modifications: (Self) throws -> Self) async throws -> [Self]","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/model\/updatevalue(at:to:where:in:)","title":"static func updateValue<Property>(at: KeyPath<Self, Property>, to: Property.Value, where: ModelValueFilter<Self>..., in: any Database) async throws -> [Self]","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/model","title":"Model","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/relation\/loadifneeded(reload:on:)","title":"func loadIfNeeded(reload: Bool, on: any Database) async throws","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/relation","title":"Relation","type":"extension"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/schema\/sqltable","title":"static var sqlTable: SQLIdentifier","type":"property"}],"path":"\/documentation\/fluentextensions\/fluentkit\/schema","title":"Schema","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/decodingrows(as:)","title":"func decodingRows<D>(as: D.Type) async throws -> Page<D>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/decodingrows(as:_:)","title":"func decodingRows<M1, M2>(as: M1.Type, M2.Type) async throws -> Page<(M1, M2)>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/decodingrows(as:_:_:)","title":"func decodingRows<M1, M2, M3>(as: M1.Type, M2.Type, M3.Type) async throws -> Page<(M1, M2, M3)>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/decodingrows(as:_:_:_:)","title":"func decodingRows<M1, M2, M3, M4>(as: M1.Type, M2.Type, M3.Type, M4.Type) async throws -> Page<(M1, M2, M3, M4)>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/transform(with:)","title":"func transform<Transformer>(with: Transformer) throws -> Page<Transformer.Output>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/transformdata(with:)","title":"func transformData<O>(with: ([T]) throws -> [O]) throws -> Page<O>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/transformdatum(with:)","title":"func transformDatum<O>(with: (T) throws -> O) throws -> Page<O>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/transformingeachrow(with:)","title":"func transformingEachRow<D>(with: (any SQLRow) throws -> D) throws -> Page<D>","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/page\/transformingrows(with:)","title":"func transformingRows<D>(with: ([any SQLRow]) throws -> [D]) throws -> Page<D>","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/page","title":"Page","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldkey\/init(_:)","title":"init(String)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldkey\/reflectionbuilder","title":"static var reflectionBuilder: (ReflectedSchemaProperty) -> FieldKey","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/fieldkey\/group(_:_:)","title":"static func group(FieldKey, FieldKey) -> FieldKey","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/fieldkey","title":"FieldKey","type":"extension"},{"title":"Extended Types","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/build(from:builder:)-478pd","title":"static func build<M>(from: String, builder: QueryParameterFilter.Builder<M>) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/build(from:builder:)-621hp","title":"static func build<M>(from: FilterCondition, builder: QueryParameterFilter.Builder<M>) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/buildsimplefilter(field:method:value:)","title":"static func buildSimpleFilter(field: DatabaseQuery.Field, method: QueryParameterFilter.Method, value: AnyCodable) throws -> DatabaseQuery.Filter?","type":"method"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/containsarray","title":"static var containsArray: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/fulltextsearch","title":"static var fullTextSearch: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/insubset","title":"static var inSubSet: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/iscontainedbyarray","title":"static var isContainedByArray: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/notinsubset","title":"static var notInSubSet: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/overlaps","title":"static var overlaps: DatabaseQuery.Filter.Method","type":"property"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method\/similarto","title":"static var similarTo: DatabaseQuery.Filter.Method","type":"property"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter\/method","title":"DatabaseQuery.Filter.Method","type":"extension"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/filter","title":"DatabaseQuery.Filter","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort\/ascending(_:)","title":"static func ascending<M, V>(KeyPath<M, V>) -> DatabaseQuery.Sort","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort\/descending(_:)","title":"static func descending<M, V>(KeyPath<M, V>) -> DatabaseQuery.Sort","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort\/sort(_:_:)","title":"static func sort<M, V>(KeyPath<M, V>, DatabaseQuery.Sort.Direction) -> DatabaseQuery.Sort","type":"method"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort\/direction\/init(_:)","title":"init(String)","type":"init"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort\/direction","title":"DatabaseQuery.Sort.Direction","type":"extension"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery\/sort","title":"DatabaseQuery.Sort","type":"extension"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databasequery","title":"DatabaseQuery","type":"extension"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databaseschema\/datatype\/init(_:defineasenum:)","title":"init(any Any.Type, defineAsEnum: Bool)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databaseschema\/datatype\/enum(_:name:)-19oa8","title":"static func `enum`<EnumType>(EnumType.Type, name: String?) -> DatabaseSchema.DataType.Enum","type":"method"},{"path":"\/documentation\/fluentextensions\/fluentkit\/databaseschema\/datatype\/enum(_:name:)-42e5d","title":"static func `enum`<EnumType>(EnumType.Type, name: String?) -> DatabaseSchema.DataType","type":"method"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databaseschema\/datatype","title":"DatabaseSchema.DataType","type":"extension"}],"path":"\/documentation\/fluentextensions\/fluentkit\/databaseschema","title":"DatabaseSchema","type":"extension"}],"path":"\/documentation\/fluentextensions\/fluentkit","title":"FluentKit","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/data\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/foundation\/data\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/foundation\/data","title":"Data","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/init(string:)","title":"init?(string: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/_(_:_:)","title":"static func < (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fluentextensions\/foundation\/date\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/foundation\/date\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fluentextensions\/foundation\/date\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/advanced(by:)","title":"func advanced(by: TimeInterval) -> Date","type":"method"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/distance(to:)","title":"func distance(to: Date) -> TimeInterval","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/date\/stride","title":"Date.Stride","type":"typealias"}],"path":"\/documentation\/fluentextensions\/foundation\/date\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/foundation\/date","title":"Date","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/uuid\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/foundation\/uuid\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/foundation\/uuid","title":"UUID","type":"extension"},{"title":"Extended Types","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/foundation\/jsondecoder\/datedecodingstrategy\/inferred","title":"static var inferred: JSONDecoder.DateDecodingStrategy","type":"property"},{"path":"\/documentation\/fluentextensions\/foundation\/jsondecoder\/datedecodingstrategy\/iso8601withfractionalseconds","title":"static var iso8601withFractionalSeconds: JSONDecoder.DateDecodingStrategy","type":"property"}],"path":"\/documentation\/fluentextensions\/foundation\/jsondecoder\/datedecodingstrategy","title":"JSONDecoder.DateDecodingStrategy","type":"extension"}],"path":"\/documentation\/fluentextensions\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"}],"path":"\/documentation\/fluentextensions\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/routingkit\/parameters\/assertnext(_:on:)","title":"func assertNext<P>(P.Type, on: any Database) async throws -> P","type":"method"},{"path":"\/documentation\/fluentextensions\/routingkit\/parameters\/assertnext(on:)","title":"func assertNext<P>(on: any Database) async throws -> P","type":"method"},{"path":"\/documentation\/fluentextensions\/routingkit\/parameters\/next(_:on:)","title":"func next<P>(P.Type, on: any Database) async throws -> P","type":"method"},{"path":"\/documentation\/fluentextensions\/routingkit\/parameters\/next(on:)","title":"func next<P>(on: any Database) async throws -> P?","type":"method"},{"path":"\/documentation\/fluentextensions\/routingkit\/parameters\/nextifexists(_:on:)","title":"func nextIfExists<P>(P.Type, on: any Database) async throws -> P?","type":"method"}],"path":"\/documentation\/fluentextensions\/routingkit\/parameters","title":"Parameters","type":"extension"}],"path":"\/documentation\/fluentextensions\/routingkit","title":"RoutingKit","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/runtime\/propertyinfo\/fieldkey","title":"var fieldKey: FieldKey","type":"property"},{"path":"\/documentation\/fluentextensions\/runtime\/propertyinfo\/fieldname","title":"var fieldName: String","type":"property"}],"path":"\/documentation\/fluentextensions\/runtime\/propertyinfo","title":"PropertyInfo","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/runtime\/typeinfo\/enumdefinition(name:)","title":"func enumDefinition(name: String?) -> DatabaseSchema.DataType.Enum?","type":"method"}],"path":"\/documentation\/fluentextensions\/runtime\/typeinfo","title":"TypeInfo","type":"extension"}],"path":"\/documentation\/fluentextensions\/runtime","title":"Runtime","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrawbuilder\/serializedsqlstring","title":"var serializedSQLString: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrawbuilder\/paginate(_:)","title":"func paginate(PageRequest) async throws -> Page<any SQLRow>","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrawbuilder\/paginate(for:pagekey:perpagekey:)","title":"func paginate(for: Request, pageKey: String, perPageKey: String) async throws -> Page<Self.PaginatedData>","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrawbuilder\/querypaginating-implementations","title":"QueryPaginating Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrawbuilder","title":"SQLRawBuilder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/apply(limit:offset:)","title":"func apply(limit: Int, offset: Int) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/count(query:)","title":"func count(query: SQLSelect) async throws -> Int","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/countgroupedby(_:)","title":"func countGroupedBy<M, V>(KeyPath<M, V>) async throws -> [String : Int]","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/from(_:)","title":"func from<M>(M.Type) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/groupbyrollup(_:)","title":"func groupByRollup(any SQLExpression...) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/join(_:to:)","title":"func join<Foreign, ForeignField, Local, LocalField>(KeyPath<Local, LocalField>, to: KeyPath<Foreign, ForeignField>) -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/labeledcountofvalues(groupedby:label:valuelabel:defaultvalue:)","title":"func labeledCountOfValues<M, V>(groupedBy: KeyPath<M, V>, label: String?, valueLabel: String?, defaultValue: (any SQLExpression)?) -> SQLSelectBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/labeledcountofvalues(groupedby:of:label:valuelabel:defaultvalue:)","title":"func labeledCountOfValues(groupedBy: any SQLExpression, of: String, label: String?, valueLabel: String?, defaultValue: (any SQLExpression)?) -> SQLSelectBuilder","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/labeledcountsgroupedby(_:defaultvalue:)","title":"func labeledCountsGroupedBy<M, V>(KeyPath<M, V>, defaultValue: (any SQLExpression)?) async throws -> [LabeledCount]","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/sum(_:)","title":"func sum<M, Field>(KeyPath<M, Field>) async throws -> Field.Value?","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/sum(_:as:labeled:)","title":"func sum(any SQLExpression, as: SQLDataType?, labeled: String) -> SQLSelectBuilder","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/paginate(_:)","title":"func paginate(PageRequest) async throws -> Page<any SQLRow>","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/paginate(for:pagekey:perpagekey:)","title":"func paginate(for: Request, pageKey: String, perPageKey: String) async throws -> Page<Self.PaginatedData>","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder\/querypaginating-implementations","title":"QueryPaginating Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlselectbuilder","title":"SQLSelectBuilder","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqldatabase\/raw(_:)","title":"func raw(String) -> SQLRawBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqldatabase","title":"SQLDatabase","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlexpression\/case(when:else:)-6bkt5","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlexpression\/case(when:else:)-dwq2","title":"func CASE(WHEN: (condition: any SQLExpression, THEN: any SQLExpression)..., ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlexpression\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlexpression\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlexpression","title":"SQLExpression","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlpredicatebuilder\/where(_:_:_:)","title":"func `where`<E>(any SQLExpression, SQLBinaryOperator, E) -> Self","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlpredicatebuilder","title":"SQLPredicateBuilder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlqueryfetcher\/all(decodingvalues:)","title":"func all<A>(decodingValues: A.Type) async throws -> [A]","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlqueryfetcher","title":"SQLQueryFetcher","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrow\/decode(_:_:)","title":"func decode<M1, M2>(M1.Type, M2.Type) throws -> (M1, M2)","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrow\/decode(_:_:_:)","title":"func decode<M1, M2, M3>(M1.Type, M2.Type, M3.Type) throws -> (M1, M2, M3)","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrow\/decode(_:_:_:_:)","title":"func decode<M1, M2, M3, M4>(M1.Type, M2.Type, M3.Type, M4.Type) throws -> (M1, M2, M3, M4)","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlrow","title":"SQLRow","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlcolumn\/init(_:)","title":"init<M, V, KP>(KP)","type":"init"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlcolumn","title":"SQLColumn","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/all(_:)-2m64i","title":"static func all(any SQLExpression...) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/all(_:)-6lksw","title":"static func all([any SQLExpression]) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/any(_:)-62u1c","title":"static func any([any SQLExpression]) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/any(_:)-8ziu1","title":"static func any(any SQLExpression...) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/count(_:)-33khx","title":"static func count([any SQLExpression]) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/count(_:)-wh50","title":"static func count(any SQLExpression...) -> SQLFunction","type":"method"},{"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction\/sum(_:)","title":"static func sum(any SQLExpression) -> SQLFunction","type":"method"}],"path":"\/documentation\/fluentextensions\/sqlkit\/sqlfunction","title":"SQLFunction","type":"extension"}],"path":"\/documentation\/fluentextensions\/sqlkit","title":"SQLKit","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/codingkeys","title":"var codingKeys: [any CodingKeyRepresentable]","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/databasequeryfield","title":"var databaseQueryField: DatabaseQuery.Field","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/fieldkey","title":"var fieldKey: [FieldKey]","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/propertyname","title":"var propertyName: String","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/sqlcolumn","title":"var sqlColumn: SQLColumn","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/sqltable","title":"var sqlTable: any SQLExpression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/case(when:else:)-3vzil","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/case(when:else:)-8pxnv","title":"func CASE(WHEN: (condition: any SQLExpression, THEN: any SQLExpression)..., ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/keypath\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/case(when:else:)-3vzil","title":"func CASE(WHEN: [(condition: any SQLExpression, THEN: any SQLExpression)], ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/case(when:else:)-8pxnv","title":"func CASE(WHEN: (condition: any SQLExpression, THEN: any SQLExpression)..., ELSE: (any SQLExpression)?) -> SQLCase","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/as(_:)","title":"func `as`(String) -> SQLAlias","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/keypath\/cast(as:)","title":"func cast(as: SQLDataType) -> SQLCast","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/keypath\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/keypath","title":"KeyPath","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/caseiterable\/toschema(name:)-9xzgm","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType.Enum","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/caseiterable\/toschema(name:)-skz5","title":"static func toSchema(name: String?) -> DatabaseSchema.DataType","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/caseiterable","title":"CaseIterable","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/asdictionary","title":"var asDictionary: [String : Int]","type":"property"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/ids","title":"var ids: [Self.Element.IDValue]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/assertexistingentitieswithids(on:)","title":"func assertExistingEntitiesWithIds(on: any Database) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/create(in:transaction:)","title":"func create(in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/delete(from:force:transaction:)","title":"func delete(from: any Database, force: Bool, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/joined(on:)","title":"func joined(on: Request) async throws -> [Self.Element.Joined]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/performbatch(_:on:transaction:concurrently:)","title":"func performBatch(FluentCommand, on: any Database, transaction: Bool, concurrently: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/performbatch(action:on:transaction:concurrently:)","title":"func performBatch(action: AsyncBatchAction<Self.Element, Self.Element>, on: any Database, transaction: Bool, concurrently: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/performbatchvoid(action:on:transaction:concurrently:)","title":"func performBatchVoid(action: AsyncBatchAction<Self.Element, Void>, on: any Database, transaction: Bool, concurrently: Bool) async throws","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/replace(with:in:transaction:)","title":"func replace(with: [Self.Element], in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/requireids()","title":"func requireIDs() throws -> [Self.Element.IDValue]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/restore(on:)","title":"func restore(on: any Database) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/restore(on:transaction:)","title":"func restore(on: any Database, transaction: Bool) async throws -> Self","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/save(in:transaction:)","title":"func save(in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/update(in:force:transaction:)","title":"func update(in: any Database, force: Bool, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/update(in:transaction:)","title":"func update(in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/updateby(_:in:transaction:)","title":"func updateBy(UpdateMethod, in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/updateifexists(in:transaction:)","title":"func updateIfExists(in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/updatevalue(at:to:in:)","title":"func updateValue<Property>(at: KeyPath<Self.Element, Property>, to: Property.Value, in: any Database) async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/upsert(in:transaction:)","title":"func upsert(in: any Database, transaction: Bool) async throws -> [Self.Element]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/collection\/reflectschema(with:to:)","title":"static func reflectSchema(with: FieldKey, to: SchemaBuilder) -> SchemaBuilder","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/collection","title":"Collection","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/sequence\/joined(on:)","title":"func joined(on: Request) async throws -> [Self.Element.Joined]","type":"method"},{"path":"\/documentation\/fluentextensions\/swift\/sequence\/updatevalue(at:to:in:)","title":"func updateValue<Property>(at: KeyPath<Self.Element, Property>, to: Property.Value, in: any Database) async throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/sequence","title":"Sequence","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/bool\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/bool\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/bool\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/bool\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/bool\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/bool\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/closedrange\/init(string:)","title":"init?(string: String) throws","type":"init"}],"path":"\/documentation\/fluentextensions\/swift\/closedrange","title":"ClosedRange","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/double\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/double\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/double\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/double\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/double\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/double\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/float\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/float\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/int\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/int\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int\/serialize(to:)","title":"func serialize(to: inout SQLSerializer)","type":"method"}],"path":"\/documentation\/fluentextensions\/swift\/int\/sqlexpression-implementations","title":"SQLExpression Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int16\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/int16\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/int16","title":"Int16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int32\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/int32\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/int32","title":"Int32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int64\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/int64\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/int64","title":"Int64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/int8\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/int8\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/int8","title":"Int8","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/string\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/string\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/uint\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/uint\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/uint","title":"UInt","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/uint16\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/uint16\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/uint16","title":"UInt16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/uint32\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/uint32\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/uint32","title":"UInt32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/uint64\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/uint64\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/uint64","title":"UInt64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/swift\/uint8\/datatype","title":"static var dataType: DatabaseSchema.DataType","type":"property"}],"path":"\/documentation\/fluentextensions\/swift\/uint8\/databaseschemadatatypeproviding-implementations","title":"DatabaseSchemaDataTypeProviding Implementations","type":"symbol"}],"path":"\/documentation\/fluentextensions\/swift\/uint8","title":"UInt8","type":"extension"}],"path":"\/documentation\/fluentextensions\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/vapor\/request\/decodeparameterfilter(withqueryparameter:builder:)","title":"func decodeParameterFilter<T>(withQueryParameter: String, builder: QueryParameterFilter.Builder<T>) throws -> DatabaseQuery.Filter?","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/request\/query(_:decoding:)","title":"func query<R>(String, decoding: R.Type) async throws -> [R]","type":"method"}],"path":"\/documentation\/fluentextensions\/vapor\/request","title":"Request","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/delete(_:params:use:)-6vppv","title":"func delete<P, R>(any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/delete(_:params:use:)-91340","title":"func delete<P, R>([any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/get(_:params:use:)-6jvtu","title":"func get<P, R>([any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/get(_:params:use:)-ci4n","title":"func get<P, R>(any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/on(_:_:params:use:)-905s2","title":"func on<P, R>(HTTPMethod, any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/on(_:_:params:use:)-y5zh","title":"func on<P, R>(HTTPMethod, [any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/on(_:body:_:params:use:)","title":"func on<P, B, R>(HTTPMethod, body: B.Type, any PathComponentRepresentable..., params: P.Type, use: (Request, P, B) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/on(_:body:at:params:use:)","title":"func on<P, B, R>(HTTPMethod, body: B.Type, at: [any PathComponentRepresentable], params: P.Type, use: (Request, P, B) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/patch(_:params:use:)-42td5","title":"func patch<P, R>(any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/patch(_:params:use:)-fbg7","title":"func patch<P, R>([any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/post(_:params:use:)-3udvn","title":"func post<P, R>([any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/post(_:params:use:)-6sicj","title":"func post<P, R>(any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/put(_:at:params:use:)-54ky7","title":"func put<P, B, R>(B.Type, at: any PathComponentRepresentable..., params: P.Type, use: (Request, P, B) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/put(_:at:params:use:)-9es3z","title":"func put<P, B, R>(B.Type, at: [any PathComponentRepresentable], params: P.Type, use: (Request, P, B) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/put(_:params:use:)-7q4po","title":"func put<P, R>([any PathComponentRepresentable], params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder\/put(_:params:use:)-88piv","title":"func put<P, R>(any PathComponentRepresentable..., params: P.Type, use: (Request, P) async throws -> R) -> Route","type":"method"}],"path":"\/documentation\/fluentextensions\/vapor\/routesbuilder","title":"RoutesBuilder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/decodepagerequest(pagekey:perpagekey:defaultpagesize:defaultmaxpagesize:)","title":"func decodePageRequest(pageKey: String, perPageKey: String, defaultPageSize: Int, defaultMaxPageSize: Int?) throws -> PageRequest","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/parsefilter(for:at:withqueryvalueat:as:)-42d7p","title":"func parseFilter(for: any Schema.Type, at: [any CodingKeyRepresentable], withQueryValueAt: String?, as: (any Any.Type)?) throws -> QueryParameterFilter?","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/parsefilter(for:at:withqueryvalueat:as:)-6wn44","title":"func parseFilter(for: any Schema.Type, at: any CodingKeyRepresentable..., withQueryValueAt: String?, as: (any Any.Type)?) throws -> QueryParameterFilter?","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/parsefilter(for:withqueryvalueat:as:)","title":"func parseFilter<V, M>(for: KeyPath<M, V>, withQueryValueAt: String?, as: (any Any.Type)?) throws -> QueryParameterFilter?","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/range(at:)","title":"func range<V>(at: String) -> ClosedRange<V>?","type":"method"},{"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer\/rangethrowing(at:)","title":"func rangeThrowing<V>(at: String) throws -> ClosedRange<V>?","type":"method"}],"path":"\/documentation\/fluentextensions\/vapor\/urlquerycontainer","title":"URLQueryContainer","type":"extension"}],"path":"\/documentation\/fluentextensions\/vapor","title":"Vapor","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"path":"\/documentation\/fluentextensions\/vaporextensions\/parameter","title":"Parameter","type":"extension"}],"path":"\/documentation\/fluentextensions\/vaporextensions","title":"VaporExtensions","type":"extension"}],"path":"\/documentation\/fluentextensions","title":"FluentExtensions","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}