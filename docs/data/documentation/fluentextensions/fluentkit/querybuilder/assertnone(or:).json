{"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/fluentextensions\/fluentkit\/querybuilder\/assertnone(or:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit\/QueryBuilder\/assertNone(or:)"},"hierarchy":{"paths":[["doc:\/\/FluentExtensions\/documentation\/FluentExtensions","doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit","doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit\/QueryBuilder"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"assertNone","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"or"},{"kind":"text","text":" "},{"text":"error","kind":"internalParam"},{"kind":"text","text":": any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":" = Abort(.badRequest)) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}]}]},{"parameters":[{"name":"error","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The error to throw if any matching records exist. Defaults to "},{"type":"codeVoice","code":"Abort(.badRequest)"},{"text":".","type":"text"}]}]}],"kind":"parameters"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Use this method when you need to verify the absence of specific records in your database.","type":"text"},{"text":" ","type":"text"},{"text":"For example, when ensuring uniqueness constraints or validating business rules.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Example: Ensure no users exist with the same email","try await User.query()","    .filter(\\.$email == newEmail)","    .assertNone(or: UserError.emailTaken)"]},{"name":"Throws","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The specified error if any matching records exist."}]}]}],"kind":"content"}],"metadata":{"conformance":{"constraints":[{"code":"Model","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Model","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","externalID":"s:9FluentKit12QueryBuilderC0A10ExtensionsE10assertNone2orys5Error_p_tYaKF","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"assertNone"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"or"},{"kind":"text","text":": any "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"symbolKind":"method","title":"assertNone(or:)","modules":[{"name":"FluentExtensions","relatedModules":["FluentKit"]}],"extendedModule":"FluentKit"},"abstract":[{"text":"Asserts that no records exist matching the current query, throwing an error if any are found.","type":"text"}],"references":{"doc://FluentExtensions/documentation/FluentExtensions/FluentKit":{"identifier":"doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit","role":"collection","type":"topic","url":"\/documentation\/fluentextensions\/fluentkit","kind":"symbol","abstract":[],"title":"FluentKit"},"doc://FluentExtensions/documentation/FluentExtensions":{"title":"FluentExtensions","role":"collection","identifier":"doc:\/\/FluentExtensions\/documentation\/FluentExtensions","type":"topic","url":"\/documentation\/fluentextensions","kind":"symbol","abstract":[]},"doc://FluentExtensions/documentation/FluentExtensions/FluentKit/QueryBuilder":{"type":"topic","kind":"symbol","abstract":[{"text":"Extension adding pagination support to QueryBuilder","type":"text"}],"fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueryBuilder","preciseIdentifier":"s:9FluentKit12QueryBuilderC"}],"navigatorTitle":[{"kind":"identifier","text":"QueryBuilder"}],"url":"\/documentation\/fluentextensions\/fluentkit\/querybuilder","title":"QueryBuilder","identifier":"doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit\/QueryBuilder","role":"symbol"},"doc://FluentExtensions/documentation/FluentExtensions/FluentKit/QueryBuilder/assertNone(or:)":{"url":"\/documentation\/fluentextensions\/fluentkit\/querybuilder\/assertnone(or:)","title":"assertNone(or:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Model"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Model"},{"text":".","type":"text"}]},"identifier":"doc:\/\/FluentExtensions\/documentation\/FluentExtensions\/FluentKit\/QueryBuilder\/assertNone(or:)","abstract":[{"type":"text","text":"Asserts that no records exist matching the current query, throwing an error if any are found."}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"assertNone","kind":"identifier"},{"kind":"text","text":"("},{"text":"or","kind":"externalParam"},{"kind":"text","text":": any "},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol"}}}